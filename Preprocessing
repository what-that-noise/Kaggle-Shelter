# -*- coding: utf-8 -*-
"""
Created on Thu Jun  2 10:55:33 2016

@author: Jonathan Whittington
"""

# -*- coding: utf-8 -*-
"""
Created on Thu May 19 16:20:48 2016


PREPROCESSING

"""

# build a classifier with scikit-learn
from sklearn.feature_extraction import DictVectorizer as DV
import pandas as pd
from sklearn import preprocessing

train_df = pd.read_csv('C:/Users/ANE604/Documents/Python Scripts/Kaggle - Shelter/train.csv.gz', header=0)
train_df.loc[train_df['SexuponOutcome'].isnull(), 'SexuponOutcome' ] = 'NA'

train_df.loc[train_df['AgeuponOutcome'].isnull(), 'AgeuponOutcome'] = 'NA'
        
train_df['Age_days'] = np.zeros((len(train_df['AgeuponOutcome']),1)).astype(int)

for i in range(len(train_df['AgeuponOutcome'])):
    if 'week' in train_df.iloc[i,7]:
        train_df.iloc[i,10] = int(train_df.iloc[i,7].split(' ')[0]) * 7
    elif 'year' in train_df.iloc[i,7]:
        train_df.iloc[i,10] = int(train_df.iloc[i,7].split(' ')[0]) * 365
    elif 'day' in train_df.iloc[i,7]:
        train_df.iloc[i,10] = int(train_df.iloc[i,7].split(' ')[0]) * 1
    elif 'month' in train_df.iloc[i,7]:
        train_df.iloc[i,10] = int(train_df.iloc[i,7].split(' ')[0]) * 30

train_df = train_df.drop(train_df.columns[[7]], axis=1)   
train_df = train_df.rename(columns={'Age_days': 'AgeuponOutcome'})

train_df['year'] = np.zeros((len(train_df['DateTime']),1)).astype(int)
train_df['month'] = np.zeros((len(train_df['DateTime']),1)).astype(int)
train_df['quarter'] = np.zeros((len(train_df['DateTime']),1)).astype(int)
for i in range(len(train_df['DateTime'])):
    train_df.iloc[i,10] = int(train_df.iloc[i,2].split('-')[0])
    train_df.iloc[i,11] = int(train_df.iloc[i,2].split('-')[1])
    if 1 <= train_df.iloc[i,11] <= 3:
        train_df.iloc[i,12] = 1
    elif 4 <= train_df.iloc[i,11] <= 6:
        train_df.iloc[i,12] = 2
    elif 7 <= train_df.iloc[i,11] <= 9:
        train_df.iloc[i,12] = 3
    else:
        train_df.iloc[i,12] = 4


train_df = train_df.drop(train_df.columns[[2,4]], axis=1)   
train_df2 = train_df
train_df2 = train_df2.fillna('NA')
train_df2['Name'] = np.where(train_df2['Name'] == 'NA',0,1).astype(int)
train_df2['AnimalType'] = np.where(train_df2['AnimalType']=='Dog',1,0).astype(int)
for i in range(len(train_df2['Breed'])):
    if 'BULL' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'BULL'
    elif 'SHORTHAIR' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'SHORTHAIR'
    elif 'TERRIER' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'TERRIER'
    elif 'POODLE' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'POODLE'
    elif 'MINIATURE' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'MINIATURE'
    elif 'SHEPERD' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'SHEPERD'
    elif 'RETRIEVER' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'RETRIEVER'
    elif 'SIAMESE' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'SIAMESE'
    elif 'SIAMESE' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'SIAMESE'
    elif 'BEAGLE' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'BEAGLE'
    elif 'BOXER' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'BOXER'
    elif 'COLLIE' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'COLLIE'
    elif 'DOMESTIC LONGHAIR' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'DOMESTIC LONGHAIR'
    elif 'CATTLE' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'CATTLE'
    elif 'HUSKY' in train_df2.iloc[i,5].upper():
        train_df2.iloc[i,5] = 'HUSKY'
    else:
        train_df2.iloc[i, 5] = 'OTHER'
    
    if 'TORT' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'TORT'
    elif 'WHITE' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'WHITE'
    elif 'BLACK' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'BLACK'
    elif 'BROWN' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'BROWN'
    elif 'TAN' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'BROWN'
    elif 'FAWN' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'BROWN'
    elif 'YELLOW' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'BROWN'
    elif 'BLACK/WHITE' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'BLACK_WHITE'
    elif 'WHITE/BLACK' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'BLACK_WHITE'
    elif 'CALICO' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'CALICO'
    elif 'ORANGE' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'ORANGE'
    elif 'BLUE' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'BLUE'
    elif 'BRINDLE' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'BRINDLE'
    elif 'BLUE' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'BLUE'
    elif 'BLACK/TAN' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'BLACK_TAN'
    elif 'TAN/BLACK' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'BLACK_TAN'
    elif 'SABLE' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'BLACK_TAN'
    elif 'GRAY' in train_df2.iloc[i,6].upper():
        train_df2.iloc[i,6] = 'GRAY'
    else:
        train_df2.iloc[i,6] = 'OTHER'

train_df2['AgeuponOutcome'] = train_df2['AgeuponOutcome']/365

for i in range(len(train_df2['year'])):
    if train_df2.iloc[i,10] == 1:
        train_df2.iloc[i,10] = 'Q1'
    elif train_df2.iloc[i,10] == 2:
        train_df2.iloc[i,10] = 'Q2'
    elif train_df2.iloc[i,10] == 3:
        train_df2.iloc[i,10] = 'Q3'
    elif train_df2.iloc[i,10] == 4:
        train_df2.iloc[i,10] = 'Q4'
    else:
        train_df2.iloc[i,10] = 'OTHER'

train_df2['year'] = train_df2['year'].astype(str)


# Design Matrix
x_cat = pd.DataFrame(train_df2.iloc[0:,4:])
x_cat2 = x_cat.drop(x_cat.columns[[3,]], axis=1)
x_cat_dict2 = x_cat2.to_dict('records')
#Vectorize
vectorizer = DV( sparse = False )
vectorized_sparse = vectorizer.fit_transform(x_cat_dict2)
design = pd.DataFrame(vectorized_sparse, columns=[vectorizer.get_feature_names()])

design2 = design.drop(['Breed=OTHER','Color=OTHER', 'SexuponOutcome=Unknown', 'quarter=Q4', 'year=2016'], axis=1)

#Recombine
train_df3 = train_df2.drop(['SexuponOutcome', 'Breed', 'Color', 'year', 'month', 'quarter'], axis=1)
train_df4 = train_df3.join(design2)


train_df4.to_csv('C:/Users/ANE604/Documents/Python Scripts/Kaggle - Shelter/After Preprocessing/ModelDataDesignMatrix.csv', header=1, index=False)

